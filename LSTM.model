library(plyr)
library(TTR)
library(forecast)
library(tseries)
library(KoNLP)
library(tidytext)
library(dplyr)
library(tidyverse)
library(reshape)
library(lubridate)
library(nycflights13)
library(keras)
library(tensorflow)
library(ggplot2)
library(timetk)


#####################사용패키지
test=read.csv("C:/a/IPC5.csv")
#######################데이터 표준화
#####################
test2021=test[test$year=="2021",]
count2021=test2021 %>% count(month(day))
N=count2021$n
year=2021
day=10
month=count2021$`month(day)`
mtime=data.frame(year,month,day)
time=as.tibble(mtime)
Day=time %>% select(year,month,day) %>% mutate(date=make_date(year,month,day))
Time=Day %>% select(date)
LSTM.2021=data.frame(Time,N)
#################2020
test2020=test[test$year=="2020",]
count2020=test2020 %>% count(month(day))
N=count2020$n
year=2020
day=10
month=count2020$`month(day)`
mtime=data.frame(year,month,day)
time=as.tibble(mtime)
Day=time %>% select(year,month,day) %>% mutate(date=make_date(year,month,day))
Time=Day %>% select(date)
LSTM.2020=data.frame(Time,N)
##############2019
test2019=test[test$year=="2019",]
count2019=test2019 %>% count(month(day))
N=count2019$n
year=2019
day=10
month=count2019$`month(day)`
mtime=data.frame(year,month,day)
time=as.tibble(mtime)
Day=time %>% select(year,month,day) %>% mutate(date=make_date(year,month,day))
Time=Day %>% select(date)
LSTM.2019=data.frame(Time,N)
####################2018
test2018=test[test$year=="2018",]
count2018=test2018 %>% count(month(day))
N=count2018$n
year=2018
day=10
month=count2018$`month(day)`
mtime=data.frame(year,month,day)
time=as.tibble(mtime)
Day=time %>% select(year,month,day) %>% mutate(date=make_date(year,month,day))
Time=Day %>% select(date)
LSTM.2018=data.frame(Time,N)
##################2017
test2017=test[test$year=="2017",]
count2017=test2017 %>% count(month(day))
N=count2017$n
year=2017
day=10
month=count2017$`month(day)`
mtime=data.frame(year,month,day)
time=as.tibble(mtime)
Day=time %>% select(year,month,day) %>% mutate(date=make_date(year,month,day))
Time=Day %>% select(date)
LSTM.2017=data.frame(Time,N)
################2016
test2016=test[test$year=="2016",]
count2016=test2016 %>% count(month(day))
N=count2016$n
year=2016
day=10
month=count2016$`month(day)`
mtime=data.frame(year,month,day)
time=as.tibble(mtime)
Day=time %>% select(year,month,day) %>% mutate(date=make_date(year,month,day))
Time=Day %>% select(date)
LSTM.2016=data.frame(Time,N)
####################2015
test2015=test[test$year=="2015",]
count2015=test2015 %>% count(month(day))
N=count2015$n
year=2015
day=10
month=count2015$`month(day)`
mtime=data.frame(year,month,day)
time=as.tibble(mtime)
Day=time %>% select(year,month,day) %>% mutate(date=make_date(year,month,day))
Time=Day %>% select(date)
LSTM.2015=data.frame(Time,N)
#############2014
test2014=test[test$year=="2014",]
count2014=test2014 %>% count(month(day))
N=count2014$n
year=2014
day=10
month=count2014$`month(day)`
mtime=data.frame(year,month,day)
time=as.tibble(mtime)
Day=time %>% select(year,month,day) %>% mutate(date=make_date(year,month,day))
Time=Day %>% select(date)
LSTM.2014=data.frame(Time,N)
###################2013
test2013=test[test$year=="2013",]
count2013=test2013 %>% count(month(day))
N=count2013$n
year=2013
day=10
month=count2013$`month(day)`
mtime=data.frame(year,month,day)
time=as.tibble(mtime)
Day=time %>% select(year,month,day) %>% mutate(date=make_date(year,month,day))
Time=Day %>% select(date)
LSTM.2013=data.frame(Time,N)
###################2012
test2012=test[test$year=="2012",]
count2012=test2012 %>% count(month(day))
N=count2012$n
year=2012
day=10
month=count2012$`month(day)`
mtime=data.frame(year,month,day)
time=as.tibble(mtime)
Day=time %>% select(year,month,day) %>% mutate(date=make_date(year,month,day))
Time=Day %>% select(date)
LSTM.2012=data.frame(Time,N)
#######################2011
test2011=test[test$year=="2011",]
count2011=test2011 %>% count(month(day))
N=count2011$n
year=2011
day=10
month=count2011$`month(day)`
mtime=data.frame(year,month,day)
time=as.tibble(mtime)
Day=time %>% select(year,month,day) %>% mutate(date=make_date(year,month,day))
Time=Day %>% select(date)
LSTM.2011=data.frame(Time,N)
###################2010
test2010=test[test$year=="2010",]
count2010=test2010 %>% count(month(day))
N=count2010$n
year=2010
day=10
month=count2010$`month(day)`
mtime=data.frame(year,month,day)
time=as.tibble(mtime)
Day=time %>% select(year,month,day) %>% mutate(date=make_date(year,month,day))
Time=Day %>% select(date)
LSTM.2010=data.frame(Time,N)
#################2009
test2009=test[test$year=="2009",]
count2009=test2009 %>% count(month(day))
N=count2009$n
year=2009
day=10
month=count2009$`month(day)`
mtime=data.frame(year,month,day)
time=as.tibble(mtime)
Day=time %>% select(year,month,day) %>% mutate(date=make_date(year,month,day))
Time=Day %>% select(date)
LSTM.2009=data.frame(Time,N)
#################2008
test2008=test[test$year=="2008",]
count2008=test2008 %>% count(month(day))
N=count2008$n
year=2008
day=10
month=count2008$`month(day)`
mtime=data.frame(year,month,day)
time=as.tibble(mtime)
Day=time %>% select(year,month,day) %>% mutate(date=make_date(year,month,day))
Time=Day %>% select(date)
LSTM.2008=data.frame(Time,N)
#################2007
test2007=test[test$year=="2007",]
count2007=test2007 %>% count(month(day))
N=count2007$n
year=2007
day=10
month=count2007$`month(day)`
mtime=data.frame(year,month,day)
time=as.tibble(mtime)
Day=time %>% select(year,month,day) %>% mutate(date=make_date(year,month,day))
Time=Day %>% select(date)
LSTM.2007=data.frame(Time,N)
#################2006
test2006=test[test$year=="2006",]
count2006=test2006 %>% count(month(day))
N=count2006$n
year=2006
day=10
month=count2006$`month(day)`
mtime=data.frame(year,month,day)
time=as.tibble(mtime)
Day=time %>% select(year,month,day) %>% mutate(date=make_date(year,month,day))
Time=Day %>% select(date)
LSTM.2006=data.frame(Time,N)
#################2005
test2005=test[test$year=="2005",]
count2005=test2005 %>% count(month(day))
N=count2005$n
year=2005
day=10
month=count2005$`month(day)`
mtime=data.frame(year,month,day)
time=as.tibble(mtime)
Day=time %>% select(year,month,day) %>% mutate(date=make_date(year,month,day))
Time=Day %>% select(date)
LSTM.2005=data.frame(Time,N)
#################2004
test2004=test[test$year=="2004",]
count2004=test2004 %>% count(month(day))
N=count2004$n
year=2004
day=10
month=count2004$`month(day)`
mtime=data.frame(year,month,day)
time=as.tibble(mtime)
Day=time %>% select(year,month,day) %>% mutate(date=make_date(year,month,day))
Time=Day %>% select(date)
LSTM.2004=data.frame(Time,N)
#################2003
test2003=test[test$year=="2003",]
count2003=test2003 %>% count(month(day))
N=count2003$n
year=2003
day=10
month=count2003$`month(day)`
mtime=data.frame(year,month,day)
time=as.tibble(mtime)
Day=time %>% select(year,month,day) %>% mutate(date=make_date(year,month,day))
Time=Day %>% select(date)
LSTM.2003=data.frame(Time,N)
#################2002
test2002=test[test$year=="2002",]
count2002=test2002 %>% count(month(day))
N=count2002$n
year=2002
day=10
month=count2002$`month(day)`
mtime=data.frame(year,month,day)
time=as.tibble(mtime)
Day=time %>% select(year,month,day) %>% mutate(date=make_date(year,month,day))
Time=Day %>% select(date)
LSTM.2002=data.frame(Time,N)
#################2001
test2001=test[test$year=="2001",]
count2001=test2001 %>% count(month(day))
N=count2001$n
year=2001
day=10
month=count2001$`month(day)`
mtime=data.frame(year,month,day)
time=as.tibble(mtime)
Day=time %>% select(year,month,day) %>% mutate(date=make_date(year,month,day))
Time=Day %>% select(date)
LSTM.2001=data.frame(Time,N)
#################2000
test2000=test[test$year=="2000",]
count2000=test2000 %>% count(month(day))
N=count2000$n
year=2000
day=10
month=count2000$`month(day)`
mtime=data.frame(year,month,day)
time=as.tibble(mtime)
Day=time %>% select(year,month,day) %>% mutate(date=make_date(year,month,day))
Time=Day %>% select(date)
LSTM.2000=data.frame(Time,N)
#####################
LSTM.r=rbind(LSTM.2021,LSTM.2020,LSTM.2019,
      LSTM.2018,LSTM.2017,LSTM.2016,
      LSTM.2015,LSTM.2014,LSTM.2013,
      LSTM.2012,LSTM.2011,LSTM.2010,
      LSTM.2009,LSTM.2008,LSTM.2007,
      LSTM.2006,LSTM.2005,LSTM.2004,
      LSTM.2003,LSTM.2002,LSTM.2001,LSTM.2000)
####################
plot(d,type="l")
N.scale=scale(LSTM.r[,2])
Date=LSTM.r$date
LSTM.data=data.frame(Date,N.scale)
plot(f,type="l")
#####################
economics
scale_factors <- c(mean(LSTM.r$N), sd(LSTM.r$N))
scaled_train <- LSTM.data[,2] #economics %>%
  #dplyr::select(unemploy) %>%
  #dplyr::mutate(unemploy = (unemploy - scale_factors[1]) / scale_factors[2])

prediction <- 12
lag <- prediction


scaled_train <- as.matrix(scaled_train)

# we lag the data 11 times and arrange that into columns
x_train_data <- t(sapply(
  1:(length(scaled_train) - lag - prediction + 1),
  function(x) scaled_train[x:(x + lag - 1), 1]
))

# now we transform it into 3D form
x_train_arr <- array(
  data = as.numeric(unlist(x_train_data)),
  dim = c(
    nrow(x_train_data),
    lag,
    1
  )
)


y_train_data <- t(sapply(
  (1 + lag):(length(scaled_train) - prediction + 1),
  function(x) scaled_train[x:(x + prediction - 1)]
))

y_train_arr <- array(
  data = as.numeric(unlist(y_train_data)),
  dim = c(
    nrow(y_train_data),
    prediction,
    1
  )
)

y_train_data <- t(sapply(
  (1 + lag):(length(scaled_train) - prediction + 1),
  function(x) scaled_train[x:(x + prediction - 1)]
))

y_train_arr <- array(
  data = as.numeric(unlist(y_train_data)),
  dim = c(
    nrow(y_train_data),
    prediction,
    1
  )
)


x_test <- LSTM.r[,2][(nrow(scaled_train) - prediction + 1):nrow(scaled_train)]

# scale the data with same scaling factors as for training
x_test_scaled <- (x_test - scale_factors[1]) / scale_factors[2]

# this time our array just has one sample, as we intend to perform one 12-months prediction
x_pred_arr <- array(
  data = x_test_scaled,
  dim = c(
    1,
    lag,
    1
  )
)

lstm_model <- keras_model_sequential()

lstm_model %>%
  layer_lstm(units = 50, # size of the layer
             batch_input_shape = c(1, 12, 1), # batch size, timesteps, features
             return_sequences = TRUE,
             stateful = TRUE) %>%
  # fraction of the units to drop for the linear transformation of the inputs
  layer_dropout(rate = 0.5) %>%
  layer_lstm(units = 50,
             return_sequences = TRUE,
             stateful = TRUE) %>%
  layer_dropout(rate = 0.5) %>%
  time_distributed(keras::layer_dense(units = 1))



lstm_model %>%
  compile(loss = 'mae', optimizer = 'adam', metrics = 'accuracy')

summary(lstm_model)



lstm_model %>% fit(
  x = x_train_arr,
  y = y_train_arr,
  batch_size = 1,
  epochs = 20,
  verbose = 0,
  shuffle = FALSE
)


lstm_forecast <- lstm_model %>%
  predict(x_pred_arr, batch_size = 1) %>%
  .[, , 1]

# we need to rescale the data to restore the original values
lstm_forecast <- lstm_forecast * scale_factors[2] + scale_factors[1]


fitted <- predict(lstm_model, x_train_arr, batch_size = 1) %>%
  .[, , 1]


lstm_forecast <- timetk::tk_ts(lstm_forecast,
                               start = c(2021, 12),
                               end = c(2022, 12),
                               frequency = 12
)




input_ts <- timetk::tk_ts(LSTM.data$N.scale, 
                          start = c(2000, 9), 
                          end = c(2021, 11), 
                          frequency = 12)



forecast_list <- list(
  model = NULL,
  method = "LSTM",
  mean = lstm_forecast,
  x = input_ts,
  fitted = fitted,
  residuals = as.numeric(input_ts) - as.numeric(fitted)
)

class(forecast_list) <- "forecast"
forecast::autoplot(forecast_list)
